/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.odin.sample.todolist.shared.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TodoListAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6214920346557605695L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TodoList\",\"namespace\":\"br.com.odin.cadastral.todolist\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Identificador do TodoList\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Nome do TodoList\"}],\"version\":\"2\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TodoListAvro> ENCODER =
      new BinaryMessageEncoder<TodoListAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TodoListAvro> DECODER =
      new BinaryMessageDecoder<TodoListAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TodoListAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TodoListAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TodoListAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TodoListAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TodoList to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TodoList from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TodoList instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TodoListAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Identificador do TodoList */
   private long id;
  /** Nome do TodoList */
   private String name;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TodoListAvro() {}

  /**
   * All-args constructor.
   * @param id Identificador do TodoList
   * @param name Nome do TodoList
   */
  public TodoListAvro(Long id, String name) {
    this.id = id;
    this.name = name;

  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (Long)value$; break;
    case 1: name = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Identificador do TodoList
   */
  public long getId() {
    return id;
  }



  /**
   * Gets the value of the 'name' field.
   * @return Nome do TodoList
   */
  public String getName() {
    return name;
  }



  /**
   * Creates a new TodoList RecordBuilder.
   * @return A new TodoList RecordBuilder
   */
  public static br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder newBuilder() {
    return new br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder();
  }

  /**
   * Creates a new TodoList RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TodoList RecordBuilder
   */
  public static br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder newBuilder(br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder other) {
    if (other == null) {
      return new br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder();
    } else {
      return new br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder(other);
    }
  }

  /**
   * Creates a new TodoList RecordBuilder by copying an existing TodoList instance.
   * @param other The existing instance to copy.
   * @return A new TodoList RecordBuilder
   */
  public static br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder newBuilder(br.com.odin.sample.todolist.shared.avro.TodoListAvro other) {
    if (other == null) {
      return new br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder();
    } else {
      return new br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for TodoList instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TodoListAvro>
    implements org.apache.avro.data.RecordBuilder<TodoListAvro> {

    /** Identificador do TodoList */
    private long id;
    /** Nome do TodoList */
    private String name;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing TodoList instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.odin.sample.todolist.shared.avro.TodoListAvro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Identificador do TodoList
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Identificador do TodoList
      * @param value The value of 'id'.
      * @return This builder.
      */
    public br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Identificador do TodoList
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Identificador do TodoList
      * @return This builder.
      */
    public br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Nome do TodoList
      * @return The value.
      */
    public String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Nome do TodoList
      * @param value The value of 'name'.
      * @return This builder.
      */
    public br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder setName(String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Nome do TodoList
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Nome do TodoList
      * @return This builder.
      */
    public br.com.odin.sample.todolist.shared.avro.TodoListAvro.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TodoListAvro build() {
      try {
        TodoListAvro record = new TodoListAvro();
        record.id = fieldSetFlags()[0] ? this.id : (Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (String) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TodoListAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<TodoListAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TodoListAvro>
    READER$ = (org.apache.avro.io.DatumReader<TodoListAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.name);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.name = in.readString();

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.name = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










