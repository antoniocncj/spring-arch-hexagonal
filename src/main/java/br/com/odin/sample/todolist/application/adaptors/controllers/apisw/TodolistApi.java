/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.odin.sample.todolist.application.adaptors.controllers.apisw;


import br.com.odin.sample.todolist.shared.dtos.ToDoRequestDTO;
import br.com.odin.sample.todolist.shared.dtos.ToDoResponseDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-17T17:48:31.548787900-03:00[America/Sao_Paulo]")

@Validated
@Api(description = "the todolist API")
@RequestMapping("todolist")
public interface TodolistApi {

    /**
     * POST /todolist : Cria uma nova lista de tarefas
     *
     * @param toDoRequestDTO  (optional)
     * @return Input inválido. (status code 405)
     */
    @ApiOperation(value = "Cria uma nova lista de tarefas", nickname = "createToDoList", notes = "", tags={ "todolist", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Input inválido.") })
    @RequestMapping(value = "/",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createToDoList(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ToDoRequestDTO toDoRequestDTO);



    /**
     * GET /todolist/all : Busca todas as listas de tarefas.
     * retorna um array de lista de tarefas
     *
     * @return Sucesso (status code 200)
     *         or Id fornceido inválido (status code 400)
     *         or Registro não encontrado (status code 404)
     */
    @ApiOperation(value = "Busca todas as listas de tarefas.", nickname = "getAllToDoList", notes = "retorna um array de lista de tarefas", response = ToDoResponseDTO.class, responseContainer = "List", tags={ "todolist", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucesso", response = ToDoResponseDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Id fornceido inválido"),
        @ApiResponse(code = 404, message = "Registro não encontrado") })
    @RequestMapping(value = "/all",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ToDoResponseDTO>> getAllToDoList();


    /**
     * GET /todolist/{id} : Busca uma lista de tarefas pelo id
     * retorna uma lista de tarefas
     *
     * @param id identificador único da lista de tarefas (required)
     * @return Sucesso (status code 200)
     *         or Id fornceido inválido (status code 400)
     *         or Registro não encontrado (status code 404)
     */
    @ApiOperation(value = "Busca uma lista de tarefas pelo id", nickname = "getToDoById", notes = "retorna uma lista de tarefas", response = ToDoResponseDTO.class, tags={ "todolist", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucesso", response = ToDoResponseDTO.class),
        @ApiResponse(code = 400, message = "Id fornceido inválido"),
        @ApiResponse(code = 404, message = "Registro não encontrado") })
    @RequestMapping(value = "/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<ToDoResponseDTO> getToDoById(@ApiParam(value = "identificador único da lista de tarefas",required=true) @PathVariable("id") Long id);


}
